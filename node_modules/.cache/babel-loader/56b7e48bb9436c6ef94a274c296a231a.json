{"ast":null,"code":"var _jsxFileName = \"/Users/sivlenghul/Desktop/my-app/src/Component/Header.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Header = props => {\n  console.log(\"In Header.js\");\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"I am \", props.myObj.name, \". I am \", props.myObj.age, \" years old.\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Hobbies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: props.myObj.hobbies.map((input, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: input\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}; // Typechecking with PropTypes: It's a good practice.\n// PropTypes exports a range of validators that can be used to make sure the data you receive is valid.\n\n\n_c = Header;\nHeader.prototype = {\n  name: PropTypes.string,\n  age: PropTypes.number,\n  hobbies: PropTypes.object\n};\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/sivlenghul/Desktop/my-app/src/Component/Header.js"],"names":["React","PropTypes","Header","props","console","log","myObj","name","age","children","hobbies","map","input","i","prototype","string","number","object"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,0BACQA,KAAK,CAACG,KAAN,CAAYC,IADpB,aACiCJ,KAAK,CAACG,KAAN,CAAYE,GAD7C,iBAC6D,GAD7D;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAME;AAAA,gBAAKL,KAAK,CAACM;AAAX;AAAA;AAAA;AAAA;AAAA,YANF,eAQE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AAAA,kBACGN,KAAK,CAACG,KAAN,CAAYI,OAAZ,CAAoBC,GAApB,CAAwB,CAACC,KAAD,EAAQC,CAAR,kBACvB;AAAA,oBAAaD;AAAb,WAASC,CAAT;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAxBD,C,CA0BA;AACA;;;KA3BMX,M;AA4BNA,MAAM,CAACY,SAAP,GAAmB;AACjBP,EAAAA,IAAI,EAAEN,SAAS,CAACc,MADC;AAEjBP,EAAAA,GAAG,EAAEP,SAAS,CAACe,MAFE;AAGjBN,EAAAA,OAAO,EAAET,SAAS,CAACgB;AAHF,CAAnB;AAMA,eAAef,MAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Header = (props) => {\n  console.log(\"In Header.js\");\n  console.log(props);\n\n  return (\n    <div>\n      <h1>Header</h1>\n      <p>\n        I am {props.myObj.name}. I am {props.myObj.age} years old.{\" \"}\n      </p>\n\n      <hr>{props.children}</hr>\n\n      <div>\n        <h3>Hobbies</h3>\n        {/* map() is used here because in App.js, hobbies is an array */}\n        <ul>\n          {props.myObj.hobbies.map((input, i) => (\n            <li key={i}>{input}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\n// Typechecking with PropTypes: It's a good practice.\n// PropTypes exports a range of validators that can be used to make sure the data you receive is valid.\nHeader.prototype = {\n  name: PropTypes.string,\n  age: PropTypes.number,\n  hobbies: PropTypes.object,\n};\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}